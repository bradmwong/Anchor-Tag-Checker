<% if (typeof linksDict !== "undefined") { %>
    <% if (Object.keys(linksDict).length > 0) { %>

        <span>

            <button id="firstPageButton">FIRST</button>
            <button id="previousPageButton">PREVIOUS</button>
            <span id="pageNumber"><%= page %></span>
            <button id="nextPageButton">NEXT</button>
            <button id="lastPageButton">LAST</button>
        </span>
        
        <table id="linkTable">
            <tr>
                <th>Weblink</th>
                <th>Errors</th>
            </tr>
            
            <% let startingIndex = page * quantity - quantity;
            let endingIndex = page * quantity - 1;
            let keys = Object.keys(linksDict);
            for (i = 0; i <= Object.keys(linksDict).length; i++) {
                let key = keys[i];
                if (linksDict.hasOwnProperty(key)) {
                    if (linksDict[key] !== []) {
                        if (i <= endingIndex) { %>
                            <tr class="row visible">
                        <% } else { %>
                            <tr class="row hidden">
                        <% } %>
                            <th class="row-url"><%= key %></th>
                            <th class="row-errors"><%= linksDict[key] %></th>
                        </tr>
                    <% }
                }
            } %>
        </table>


        <br>



        <script>

            // FIRST PAGE BUTTON
            firstPageButton.addEventListener('click', function() {
                pageSelector('first');
            });

            // LAST PAGE BUTTON
            lastPageButton.addEventListener('click', function() {
                pageSelector('last');
            });

            // NEXT PAGE BUTTON
            nextPageButton.addEventListener('click', function() {
                pageSelector('next');
            });

            // PREVIOUS PAGE BUTTON
            previousPageButton.addEventListener('click', function () {
                pageSelector('previous');
            })


            // Update the rows/data shown on each page
            async function pageSelector(pageSelection) {

                const nextPageButton = document.querySelector('#nextPageButton');
                const previousPageButton = document.querySelector('#previousPageButton');
                const pageField = document.querySelector('#pageNumber');
                const rows = document.querySelectorAll('.row');

                const pageQuantity = <%= quantity %>;
                const firstPage = 1;
                const lastPage = (rows.length % pageQuantity !== 0) ? (Math.floor(rows.length / pageQuantity) + 1) : (rows.length / pageQuantity);
                const pageNumber = parseInt(pageField.innerText, 10);

                let incompleteURLs = [];
                let startIndex = 0;
                let endIndex = 0;
                let newPageNumber = 0;

                // Reveal and populate next page
                if (pageSelection === 'first') {
                    newPageNumber = firstPage;
                } else if (pageSelection === 'last') {
                    newPageNumber = lastPage;
                } else if (pageSelection === 'next') {
                    newPageNumber =  pageNumber + 1;
                } else if (pageSelection === 'previous') {
                    newPageNumber = pageNumber - 1;
                }

                // Check if new page is valid
                if (newPageNumber === pageNumber || newPageNumber < firstPage || newPageNumber > lastPage) {
                    console.log('not a new page');
                    return;
                }

                // Hide current page
                startIndex = pageNumber * pageQuantity - pageQuantity;
                endIndex = pageNumber * pageQuantity - 1;
                for (let i = startIndex; i <= endIndex; i++) {
                    if (typeof rows[i] !== "undefined") {
                        rows[i].classList.remove('visible');
                        rows[i].classList.add('hidden');
                    }
                }

                pageField.innerText = newPageNumber;
                startIndex = newPageNumber * pageQuantity - pageQuantity;
                endIndex = newPageNumber * pageQuantity - 1;

                for (let i = startIndex; i <= endIndex; i++) {
                    if (typeof rows[i] !== "undefined") {
                        const rowURL = rows[i].querySelector('.row-url').innerText;
                        const rowErrors = rows[i].querySelector('.row-errors').innerText;
                        if (rowErrors === "" || rowErrors.includes('ERROR:')) {
                            incompleteURLs.push(rowURL);
                        }
                        rows[i].classList.remove('hidden');
                        rows[i].classList.add('visible');
                    }
                }

                await sendPostRequestToUpdateErrorsColumn(incompleteURLs);
                
            }
            

            // Check for errors to update the 'Errors' column
            async function sendPostRequestToUpdateErrorsColumn(incompleteURLs) {
                
                // Check if there are URLs to check
                if (incompleteURLs.length) {
                    try {

                        const dataToSend = {
                            incompleteURLs: incompleteURLs,
                        };
                        const response = await fetch('/changePage', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify(dataToSend)
                        });
                        const rowErrors = document.querySelectorAll('.row-errors');

                        // Check if response received
                        if (response.ok) {
                            
                            const responseText = await response.text();
                            const linksObject = JSON.parse(responseText);
                            
                            // Fill in 'Errors' column 
                            Object.entries(linksObject).forEach(([key, value]) => {
                                const index = findIndexRowOfURL(key);
                                if(findIndexRowOfURL(key) >= 0) {
                                    rowErrors[index].innerText = value;
                                    console.log(`updated: ${index}`)
                                }
                            });
                        
                        } else {
                            
                            // Fill in 'Errors' column 
                            for (let i = 0; i < incompleteURLs.length; i++) {
                                const index = findIndexRowOfURL(incompleteURLs[i]);
                                rowErrors[index].innerText = `ERROR: Response Status ${response.status}`;
                            }

                        }

                    } catch (error) {
                        console.error('Error:', error);
                    }
                }
            }
            
            // Returns the index row that contains the URL string
            function findIndexRowOfURL (urlString) {

                const rowURLs = document.querySelectorAll('.row-url');
                
                // Return -1 if not found
                let index = -1;
                
                // Check if URL string can be found
                for (let i = 0; i < rowURLs.length; i++) {
                    let rowURL = rowURLs[i].innerText.trim();
                    if (urlString.trim() === rowURL) {
                        index = i;
                        break;
                    }
                }

                return index;

            }

        </script>

    <% } else { %>
        <li>Unable to find any SiteMap Links</li>
    <% }; %>
<% } else { %>
    <li>linksList is undefined</li>
<% }; %>