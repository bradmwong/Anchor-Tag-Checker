
<h1>Input Sitemap Here</h1>
<form id="form" action="/" method="POST">
    <input id="siteMapUrl" type="text" name="siteMapUrl" required>
    <input id="submitButton" type="submit" value="Submit">
</form>
<div id="loadingPlaceholder" class="ui hidden image">
    <img class=" hidden image" src="\assets\loading-128px.gif" alt="Loading...">
</div>

<% if (siteMapUrl) { %>
    <h1>Links for SiteMap URL: <%= siteMapUrl %></h1>
<% }; %>

<script>
    const submitButton = document.querySelector('#submitButton');
    submitButton.addEventListener('click', function(e) {
        const loadingPlaceholder = document.querySelector('#loadingPlaceholder');
        const siteMapUrl = document.querySelector('#siteMapUrl');
        
        if (siteMapUrl.value !== '') {
            loadingPlaceholder.innerText = "LOADING...";
        }
    });
</script>


<% if (typeof linksDict !== "undefined") { %>
    <% if (Object.keys(linksDict).length > 0) { %>

        <span>

            <button
                id="firstPageButton"
                <% if ((Object.keys(linksDict).length <= quantity) || (page === 1)) { %> disabled <% } %>
            >FIRST</button>
            <button
                id="previousPageButton"
                <% if ((Object.keys(linksDict).length <= quantity) || (page === 1)) { %> disabled <% } %>
            >PREVIOUS</button>
            <input
                type="text"
                id="pageNumber"
                value="<%= page %>"
                <% if (Object.keys(linksDict).length <= quantity) { %> disabled <% } %>
            >
            <button
                id="nextPageButton"
                <% if (Object.keys(linksDict).length <= quantity) { %> disabled <% } %>
            >NEXT</button>
            <button
                id="lastPageButton"
                <% if (Object.keys(linksDict).length <= quantity) { %> disabled <% } %>
            >LAST</button>
        </span>
        <div class="table-container">
            <table id="linkTable" class="ui unstackable table">
                <thead>
                    <tr>
                        <th>Weblink</th>
                        <th>Errors</th>
                    </tr>
                </thead>
                
                <tbody>
                    <% let startingIndex = page * quantity - quantity;
                    let endingIndex = page * quantity - 1;
                    let keys = Object.keys(linksDict);
                    for (i = 0; i <= Object.keys(linksDict).length; i++) {
                        let key = keys[i];
                        if (linksDict.hasOwnProperty(key)) {
                            if (linksDict[key] !== []) {
                                if (i <= endingIndex) { %>
                                    <tr class="row visible">
                                <% } else { %>
                                    <tr class="row hidden">
                                <% } %>
                                    <td class="row-url"><%= key %></th>
                                    <td class="row-errors"><%= linksDict[key] %></th>
                                </tr>
                            <% }
                        }
                    } %>
                </tbody>
            </table>
        </div>    

        <br>



        <script>

            

            let currentPageNumber = 1;

            const firstPageButton = document.querySelector('#firstPageButton');
            const lastPageButton = document.querySelector('#lastPageButton');
            const nextPageButton = document.querySelector('#nextPageButton');
            const previousPageButton = document.querySelector('#previousPageButton');
            const pageNumberInput = document.querySelector('#pageNumber');

            // FIRST PAGE BUTTON
            firstPageButton.addEventListener('click', function() {
                pageSelector('first');
            });

            // LAST PAGE BUTTON
            lastPageButton.addEventListener('click', function() {
                pageSelector('last');
            });

            // NEXT PAGE BUTTON
            nextPageButton.addEventListener('click', function() {
                pageSelector('next');
            });

            // PREVIOUS PAGE BUTTON
            previousPageButton.addEventListener('click', function () {
                pageSelector('previous');
            })

            // PAGE INPUT
            pageNumberInput.addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    pageSelector(pageNumberInput.value);
                }
            });

            // Update the rows/data shown on each page
            async function pageSelector(pageSelection) {

                const pageNumberInput = document.querySelector('#pageNumber');
                const rows = document.querySelectorAll('.row');

                const pageQuantity = <%= quantity %>;
                const firstPage = 1;
                const lastPage = (rows.length % pageQuantity !== 0) ? (Math.floor(rows.length / pageQuantity) + 1) : (rows.length / pageQuantity);
                
                let incompleteURLs = [];
                let startIndex = 0;
                let endIndex = 0;
                let newPageNumber = 0;

                // Define the next page number
                if (pageSelection === 'first') {
                    newPageNumber = firstPage;
                } else if (pageSelection === 'last') {
                    newPageNumber = lastPage;
                } else if (pageSelection === 'next') {
                    newPageNumber =  currentPageNumber + 1;
                } else if (pageSelection === 'previous') {
                    newPageNumber = currentPageNumber - 1;
                } else if (pageSelection.match(/^[0-9]+$/)  !== null) {
                    newPageNumber = parseFloat(pageSelection);
                } else {
                    pageNumberInput.value = currentPageNumber;
                    return;
                }

                // Check if new page is within range
                if (newPageNumber === currentPageNumber || newPageNumber < firstPage || newPageNumber > lastPage) {
                    pageNumberInput.value = currentPageNumber;
                    return;
                }

                // Hide current page
                startIndex = currentPageNumber * pageQuantity - pageQuantity;
                endIndex = currentPageNumber * pageQuantity - 1;
                for (let i = startIndex; i <= endIndex; i++) {
                    if (typeof rows[i] !== "undefined") {
                        rows[i].classList.remove('visible');
                        rows[i].classList.add('hidden');
                    }
                }

                // Show next page
                pageNumberInput.value = newPageNumber;
                currentPageNumber = newPageNumber
                startIndex = newPageNumber * pageQuantity - pageQuantity;
                endIndex = newPageNumber * pageQuantity - 1;
                for (let i = startIndex; i <= endIndex; i++) {
                    if (typeof rows[i] !== "undefined") {
                        const rowURL = rows[i].querySelector('.row-url').innerText;
                        const rowErrors = rows[i].querySelector('.row-errors').innerText;
                        if (rowErrors === "" || rowErrors.includes('ERROR:')) {
                            incompleteURLs.push(rowURL);
                        }
                        rows[i].classList.remove('hidden');
                        rows[i].classList.add('visible');
                    }
                }

                // Disable unavailable buttons
                // Single Page
                console.log(rows.length);
                console.log(pageQuantity);
                if (rows.length <= pageQuantity) {
                    firstPageButton.disabled = true;
                    lastPageButton.disabled = true;
                    nextPageButton.disabled = true;
                    previousPageButton.disabled = true;
                    pageNumberInput.disabled = true;
                // New Page is First Page
                } else if (newPageNumber <= firstPage) {
                    firstPageButton.disabled = true;
                    lastPageButton.disabled = false;
                    previousPageButton.disabled = true;
                    nextPageButton.disabled = false;
                // New Page is Last Page
                } else if (newPageNumber >= lastPage) {
                    firstPageButton.disabled = false;
                    lastPageButton.disabled = true;
                    previousPageButton.disabled = false;
                    nextPageButton.disabled = true;
                // Page is somewhere in the middle
                } else {
                    firstPageButton.disabled = false;
                    lastPageButton.disabled = false;
                    nextPageButton.disabled = false;
                    previousPageButton.disabled = false;
                    pageNumberInput.disabled = false;
                }

                await sendPostRequestToUpdateErrorsColumn(incompleteURLs);
                
            }
            

            // Check for errors to update the 'Errors' column
            async function sendPostRequestToUpdateErrorsColumn(incompleteURLs) {
                
                // Check if there are URLs to check
                if (incompleteURLs.length) {
                    try {

                        const dataToSend = {
                            incompleteURLs: incompleteURLs,
                        };
                        const response = await fetch('/changePage', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify(dataToSend)
                        });
                        const rowErrors = document.querySelectorAll('.row-errors');

                        // Check if response received
                        if (response.ok) {
                            
                            const responseText = await response.text();
                            const linksObject = JSON.parse(responseText);
                            
                            // Fill in 'Errors' column 
                            Object.entries(linksObject).forEach(([key, value]) => {
                                const index = findIndexRowOfURL(key);
                                if(findIndexRowOfURL(key) >= 0) {
                                    rowErrors[index].innerText = value;
                                    console.log(`updated: ${index}`)
                                }
                            });
                        
                        } else {
                            
                            // Fill in 'Errors' column 
                            for (let i = 0; i < incompleteURLs.length; i++) {
                                const index = findIndexRowOfURL(incompleteURLs[i]);
                                rowErrors[index].innerText = `ERROR: Response Status ${response.status}`;
                            }

                        }

                    } catch (error) {
                        console.error('Error:', error);
                    }
                }
            }
            
            // Returns the index row that contains the URL string
            function findIndexRowOfURL (urlString) {

                const rowURLs = document.querySelectorAll('.row-url');
                
                // Return -1 if not found
                let index = -1;
                
                // Check if URL string can be found
                for (let i = 0; i < rowURLs.length; i++) {
                    let rowURL = rowURLs[i].innerText.trim();
                    if (urlString.trim() === rowURL) {
                        index = i;
                        break;
                    }
                }

                return index;

            }

        </script>

    <% } else { %>
        <li>Unable to find any SiteMap Links</li>
    <% }; %>
<% } else { %>
    <li>linksList is undefined</li>
<% }; %>